# Generated by Django 4.2.21 on 2025-05-21 17:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0094_alter_page_locale'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailimages', '0027_image_description'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#0066cc', help_text='Hex color code', max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Blog Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('excerpt', models.TextField(blank=True, help_text='Brief description of the blog post', max_length=300)),
                ('body', wagtail.fields.StreamField([('heading', 0), ('paragraph', 1), ('image', 2), ('code', 3), ('quote', 4), ('gallery', 5), ('embed', 6), ('table', 7)], blank=True, block_lookup={0: ('wagtail.blocks.CharBlock', (), {'form_classname': 'title'}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.images.blocks.ImageChooserBlock', (), {}), 3: ('wagtail.blocks.TextBlock', (), {'help_text': 'Code snippet'}), 4: ('wagtail.blocks.BlockQuoteBlock', (), {}), 5: ('wagtail.blocks.StreamBlock', [[('image', 2)]], {}), 6: ('wagtail.blocks.RawHTMLBlock', (), {}), 7: ('wagtail.blocks.TextBlock', (), {'help_text': 'HTML table'})})),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Estimated reading time in minutes')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('ai_generated_summary', models.TextField(blank=True, help_text='AI-generated summary of the blog post')),
                ('ai_suggested_tags', models.TextField(blank=True, help_text='AI-suggested tags (comma-separated)')),
                ('ai_seo_keywords', models.TextField(blank=True, help_text='AI-suggested SEO keywords')),
                ('ai_content_score', models.FloatField(blank=True, help_text='AI content quality score (0-1)', null=True)),
                ('tone_analysis', models.CharField(blank=True, choices=[('professional', 'Professional'), ('casual', 'Casual'), ('technical', 'Technical'), ('creative', 'Creative'), ('educational', 'Educational')], help_text='AI-detected tone of the content', max_length=50)),
                ('is_draft', models.BooleanField(default=True)),
                ('draft_notes', models.TextField(blank=True, help_text='Internal notes for drafts')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_posts', to=settings.AUTH_USER_MODEL)),
                ('categories', modelcluster.fields.ParentalManyToManyField(blank=True, to='blog.blogcategory')),
                ('featured_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_featured_image', to='wagtailimages.image')),
                ('social_image', models.ForeignKey(blank=True, help_text='Image for social media sharing (defaults to featured image)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blog_social_image', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='blog.blogpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='blogpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blog.BlogPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='BlogIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True)),
                ('featured_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='featured_in_index', to='blog.blogpage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BlogAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', wagtail.fields.RichTextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('linkedin', models.URLField(blank=True)),
                ('github', models.URLField(blank=True)),
                ('posts_count', models.PositiveIntegerField(default=0)),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_avatar', to='wagtailimages.image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Author',
                'verbose_name_plural': 'Blog Authors',
            },
        ),
    ]
