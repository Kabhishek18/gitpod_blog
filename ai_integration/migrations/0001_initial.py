# Generated by Django 4.2.21 on 2025-05-21 17:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('provider', models.CharField(choices=[('huggingface', 'Hugging Face'), ('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google'), ('custom', 'Custom')], max_length=50)),
                ('model_id', models.CharField(help_text='Model identifier used in API calls', max_length=200)),
                ('model_type', models.CharField(choices=[('text_generation', 'Text Generation'), ('text_classification', 'Text Classification'), ('image_generation', 'Image Generation'), ('image_classification', 'Image Classification'), ('sentiment_analysis', 'Sentiment Analysis'), ('summarization', 'Summarization'), ('translation', 'Translation'), ('question_answering', 'Question Answering')], max_length=50)),
                ('description', models.TextField()),
                ('max_tokens', models.PositiveIntegerField(default=512)),
                ('temperature', models.FloatField(default=0.7)),
                ('top_p', models.FloatField(default=0.9)),
                ('api_endpoint', models.URLField(blank=True)),
                ('requires_auth', models.BooleanField(default=True)),
                ('rate_limit', models.PositiveIntegerField(default=60, help_text='Requests per minute')),
                ('is_active', models.BooleanField(default=True)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['provider', 'name'],
                'unique_together': {('provider', 'model_id')},
            },
        ),
        migrations.CreateModel(
            name='UserAIUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_month', models.DateField(default=django.utils.timezone.now)),
                ('requests_this_month', models.PositiveIntegerField(default=0)),
                ('tokens_this_month', models.PositiveIntegerField(default=0)),
                ('cost_this_month', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('total_tokens', models.PositiveIntegerField(default=0)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('monthly_request_limit', models.PositiveIntegerField(default=100)),
                ('monthly_token_limit', models.PositiveIntegerField(default=50000)),
                ('monthly_cost_limit', models.DecimalField(decimal_places=2, default=10.0, max_digits=10)),
                ('is_quota_exceeded', models.BooleanField(default=False)),
                ('last_request_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User AI Usage',
                'verbose_name_plural': 'User AI Usage',
            },
        ),
        migrations.CreateModel(
            name='PromptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('template_type', models.CharField(choices=[('blog_draft', 'Blog Draft Generation'), ('blog_improve', 'Blog Improvement'), ('seo_meta', 'SEO Meta Generation'), ('content_expand', 'Content Expansion'), ('content_summarize', 'Content Summarization'), ('title_generation', 'Title Generation'), ('tag_suggestion', 'Tag Suggestion'), ('tone_adjustment', 'Tone Adjustment'), ('grammar_fix', 'Grammar Correction')], max_length=50)),
                ('template_text', models.TextField(help_text='Use {variable_name} for placeholders that will be replaced')),
                ('required_variables', models.JSONField(default=list, help_text='List of required variable names')),
                ('optional_variables', models.JSONField(default=list, help_text='List of optional variable names')),
                ('default_temperature', models.FloatField(default=0.7)),
                ('default_max_tokens', models.PositiveIntegerField(default=512)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('avg_rating', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_models', models.ManyToManyField(blank=True, help_text='AI models that work best with this template', to='ai_integration.aimodel')),
            ],
            options={
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContentAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('blog_post', 'Blog Post'), ('project_description', 'Project Description'), ('portfolio_content', 'Portfolio Content'), ('general_text', 'General Text')], max_length=50)),
                ('content_id', models.PositiveIntegerField(help_text='ID of the analyzed content')),
                ('content_text', models.TextField()),
                ('readability_score', models.FloatField(blank=True, null=True)),
                ('sentiment_score', models.FloatField(blank=True, null=True)),
                ('tone_classification', models.CharField(blank=True, max_length=50)),
                ('keyword_density', models.JSONField(default=dict)),
                ('suggested_keywords', models.JSONField(default=list)),
                ('meta_description_suggestion', models.TextField(blank=True)),
                ('title_suggestions', models.JSONField(default=list)),
                ('word_count', models.PositiveIntegerField(default=0)),
                ('reading_time', models.PositiveIntegerField(default=0, help_text='Minutes')),
                ('complexity_score', models.FloatField(blank=True, null=True)),
                ('improvement_suggestions', models.JSONField(default=list)),
                ('tag_suggestions', models.JSONField(default=list)),
                ('analyzed_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_integration.aimodel')),
            ],
            options={
                'verbose_name_plural': 'Content Analyses',
                'ordering': ['-analyzed_at'],
            },
        ),
        migrations.CreateModel(
            name='AIRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('blog_draft', 'Blog Draft Generation'), ('blog_improve', 'Blog Improvement'), ('seo_optimization', 'SEO Optimization'), ('image_generation', 'Image Generation'), ('content_analysis', 'Content Analysis'), ('tag_suggestion', 'Tag Suggestion'), ('title_generation', 'Title Generation'), ('grammar_check', 'Grammar Check'), ('tone_analysis', 'Tone Analysis'), ('summarization', 'Content Summarization')], max_length=50)),
                ('input_text', models.TextField()),
                ('output_text', models.TextField()),
                ('prompt_template', models.TextField(blank=True, help_text='Template used for the prompt')),
                ('parameters', models.JSONField(default=dict, help_text='Additional parameters sent to AI model')),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='ai_integration.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIGeneratedImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.TextField(help_text='Text prompt used to generate the image')),
                ('negative_prompt', models.TextField(blank=True, help_text='Negative prompt to avoid certain elements')),
                ('width', models.PositiveIntegerField(default=512)),
                ('height', models.PositiveIntegerField(default=512)),
                ('steps', models.PositiveIntegerField(default=20)),
                ('guidance_scale', models.FloatField(default=7.5)),
                ('seed', models.BigIntegerField(blank=True, null=True)),
                ('image_file', models.ImageField(upload_to='ai_generated/')),
                ('thumbnail', models.ImageField(blank=True, upload_to='ai_generated/thumbnails/')),
                ('used_in_content', models.BooleanField(default=False)),
                ('content_type', models.CharField(blank=True, max_length=50)),
                ('content_id', models.PositiveIntegerField(blank=True, null=True)),
                ('generation_time', models.FloatField(help_text='Time taken to generate (seconds)')),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_images', to='ai_integration.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_generated_images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality_rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rate the quality of AI output (1-5 stars)')),
                ('usefulness_rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], help_text='Rate how useful the output was (1-5 stars)')),
                ('positive_aspects', models.TextField(blank=True, help_text='What did you like about the AI output?')),
                ('negative_aspects', models.TextField(blank=True, help_text='What could be improved?')),
                ('suggestions', models.TextField(blank=True, help_text='Any suggestions for improvement?')),
                ('content_used', models.BooleanField(default=False, help_text='Did you use the AI-generated content?')),
                ('modifications_made', models.TextField(blank=True, help_text='What modifications did you make to the content?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_integration.airequest')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
